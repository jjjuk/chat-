### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Message {
  content: String!
  createdAt: String!
  from: User!
  id: Int!
  mine: Boolean
  userId: Int!
}

input MessageOrderByInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  userId: SortOrder
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  createMessage(content: String!): Message
  deleteAllMessages: Int
  login(name: String!, password: String!): AuthPayload
  signup(name: String!, password: String!): AuthPayload
}

type Query {
  me: User
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int, orderBy: [MessageOrderByInput!]): [Message!]!
}

enum SortOrder {
  asc
  desc
}

type Subscription {
  newMessage: Message
}

type User {
  id: Int!
  name: String!
  online: Boolean
  password: String
  typing: Boolean
}
